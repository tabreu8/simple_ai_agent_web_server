name: CI Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.12, 3.13]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov  # For coverage reporting
    
    - name: Create test directories
      run: |
        mkdir -p test_chromadb
        mkdir -p test_agent_memory
    
    - name: Set up test environment
      run: |
        echo "CHROMADB_PATH=test_chromadb" >> $GITHUB_ENV
        echo "CHROMADB_COLLECTION=test_collection" >> $GITHUB_ENV
        echo "AGENT_MEMORY_PATH=test_agent_memory" >> $GITHUB_ENV
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV
        echo "MARKITDOWN_USE_LLM=false" >> $GITHUB_ENV
    
    - name: Run unit tests (no API key required)
      run: |
        pytest tests/test_knowledge_base.py -v --tb=short
    
    - name: Run API tests (without integration)
      run: |
        # Start server in background
        python -m uvicorn main:app --host 0.0.0.0 --port 8000 &
        SERVER_PID=$!
        
        # Wait for server to start
        sleep 10
        
        # Test server is running
        curl -f http://localhost:8000/ || exit 1
        
        # Run API tests (docs API doesn't need OpenAI key)
        pytest tests/test_docs_api.py -v --tb=short
        
        # Kill server
        kill $SERVER_PID
    
    - name: Run integration tests (with OpenAI API key)
      if: env.OPENAI_API_KEY != ''
      run: |
        # Start server in background
        python -m uvicorn main:app --host 0.0.0.0 --port 8000 &
        SERVER_PID=$!
        
        # Wait for server to start
        sleep 10
        
        # Test server is running
        curl -f http://localhost:8000/ || exit 1
        
        # Run agent API tests and integration tests
        pytest tests/test_agent_api.py tests/test_agent_knowledge_integration.py -v --tb=short
        
        # Kill server
        kill $SERVER_PID
    
    - name: Run all tests with coverage (if API key available)
      if: env.OPENAI_API_KEY != ''
      run: |
        # Start server in background
        python -m uvicorn main:app --host 0.0.0.0 --port 8000 &
        SERVER_PID=$!
        
        # Wait for server to start
        sleep 10
        
        # Run all tests with coverage
        pytest tests/ --cov=. --cov-report=xml --cov-report=html --tb=short
        
        # Kill server
        kill $SERVER_PID
    
    - name: Upload coverage reports to Codecov
      if: env.OPENAI_API_KEY != ''
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Archive test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-python-${{ matrix.python-version }}
        path: |
          htmlcov/
          .coverage
          coverage.xml
        retention-days: 30

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
    
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 isort
    
    - name: Run black (code formatting check)
      run: black --check --diff .
    
    - name: Run flake8 (linting)
      run: flake8 . --max-line-length=120 --exclude=venv,__pycache__,.git,.venv --per-file-ignores="tests/*:E501"
    
    - name: Run isort (import sorting check)  
      run: isort --check-only --diff .

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
    
    - name: Install security scanning tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run bandit (security linting)
      run: bandit -r . -x tests/,venv/ -f json -o bandit-report.json || true
    
    - name: Run safety (dependency vulnerability check)
      run: safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30